[{"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\index.js":"1","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\App.js":"2","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\mutations.js":"3","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\queries.js":"4","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\pages\\SavedBooks.js":"5","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\pages\\SearchBooks.js":"6","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\components\\Navbar.js":"7","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\components\\SignupForm.js":"8","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\components\\LoginForm.js":"9","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\API.js":"10","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\auth.js":"11","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\localStorage.js":"12"},{"size":283,"mtime":1630304095122,"results":"13","hashOfConfig":"14"},{"size":1395,"mtime":1630348689006,"results":"15","hashOfConfig":"14"},{"size":1157,"mtime":1630892670106,"results":"16","hashOfConfig":"14"},{"size":267,"mtime":1630892604175,"results":"17","hashOfConfig":"14"},{"size":4723,"mtime":1630627553450,"results":"18","hashOfConfig":"14"},{"size":7743,"mtime":1630891986852,"results":"19","hashOfConfig":"14"},{"size":2647,"mtime":1630303900829,"results":"20","hashOfConfig":"14"},{"size":4369,"mtime":1630302233237,"results":"21","hashOfConfig":"14"},{"size":3266,"mtime":1630302357265,"results":"22","hashOfConfig":"14"},{"size":1794,"mtime":1630360092429,"results":"23","hashOfConfig":"14"},{"size":1283,"mtime":1628996699963,"results":"24","hashOfConfig":"14"},{"size":1244,"mtime":1630129515886,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"s1c9hg",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\index.js",[],["53","54"],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\App.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\mutations.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\queries.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\pages\\SavedBooks.js",["55","56"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from \"react-bootstrap\";\r\n\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { REMOVE_BOOK } from \"../utils/mutations\";\r\nimport { GET_ME } from \"../utils/queries\";\r\n\r\n// import { getMe, deleteBook } from \"../utils/API\";\r\nimport Auth from \"../utils/auth\";\r\nimport { removeBookId } from \"../utils/localStorage\";\r\n\r\nconst SavedBooks = () => {\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n  console.log(removeBook);\r\n  console.log(error);\r\n  const { loading, data } = useQuery(GET_ME);\r\n  const userData = data?.me || {}; // if we have something in the data vairable then me method is true\r\n\r\n  // const [userData, setUserData] = useState({});\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  // const userDataLength = Object.keys(userData).length;\r\n\r\n  // useEffect(() => {\r\n  //   const getUserData = async () => {\r\n  //     try {\r\n  //       // create a token variable with which uses a condition\r\n  //       // uses Auth, calls the loggedin() method and if true runs the getToken method attached to Auth\r\n  //       // if false token is now null\r\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n  //       // if token is not true then returns flase and gets out of function\r\n  //       if (!token) {\r\n  //         return false;\r\n  //       }\r\n\r\n  //       // if there is a token it runs the the getMe method with the token and puts it into response\r\n  //       const response = await getMe(token);\r\n\r\n  //       if (!response.ok) {\r\n  //         throw new Error(\"something went wrong!\");\r\n  //       }\r\n\r\n  //       // we get the response json and put into the variable user\r\n  //       const user = await response.json();\r\n  //       // now we set the userData == to user which is a json object\r\n  //       setUserData(user);\r\n  //     } catch (err) {\r\n  //       console.error(err);\r\n  //     }\r\n  //   };\r\n\r\n  //   getUserData(); // runs the getUserData function but there is a restriction\r\n  // }, [userDataLength]); // the function only runs again if react sees a change to the userDataLengths\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await removeBook({ variables: { bookId } });\r\n\r\n      console.log(data);\r\n      // const response = await deleteBook(bookId, token);\r\n\r\n      // if (!response.ok) {\r\n      //   throw new Error(\"something went wrong!\");\r\n      // }\r\n      if (error) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      // const updatedUser = await response.json();\r\n      // setUserData(updatedUser);\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    // this whole things the the page that displays the save books for an account\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\r\n              }:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\pages\\SearchBooks.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\components\\Navbar.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\components\\LoginForm.js",["57"],"// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\nimport { LOGIN_USER } from \"../utils/mutations\";\r\nimport { useMutation } from \"@apollo/client\";\r\n// import { useMutation } from \"@apollo/react-hooks\";\r\n// import { loginUser } from '../utils/API';\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [login, { error, data }] = useMutation(LOGIN_USER);\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n      console.log(data);\r\n\r\n      if (error) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      // const response = await login(userFormData);\r\n\r\n      // if (!response.ok) {\r\n      //   throw new Error(\"something went wrong!\");\r\n      // }\r\n\r\n      // const { token, user } = await response.json();\r\n      // console.log(user);\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\API.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\auth.js",[],"C:\\Users\\edgar\\Desktop\\BookSearchEngine\\client\\src\\utils\\localStorage.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"66","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"67","line":12,"column":26,"nodeType":"64","messageId":"65","endLine":12,"endColumn":30},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]